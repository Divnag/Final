@model IEnumerable<ParkSomewhereApp.Models.Review>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>

<p>
    @Html.ActionLink("All Reviews", "Index")
</p>

@*<div>
    <button id="getreviews" class="btn btn-primary">Reviews</button>
</div>
<div id="allChats" class="chat-list">
</div>*@

@using (Html.BeginForm())
{
    <tr>
        <th>
            @Html.DropDownList("ParkID", null, htmlAttributes: new { @class = "form-control" })
        </th>
        <th>
            <input type="submit" value="Search" class="btn btn-default" />
        </th>

    </tr>
}

@section Scripts {
    <script>
        //update the chats area when the get chats button is clicked
            $('#getreviews').click(displayChats);
            //Display chats on page load and then refresh every 10 seconds
            //window.onload = function () {
            //    displayChats(); //loads chats on page load -- not a project requirement, but seems to make sense
            //    setInterval(displayChats, 10000); //runs displayChats function every 10 seconds
            //}
            //display chats function that will be reused several times in script.
            function displayChats() {
                $.get("@Url.Action("TestJson","Reviews")", function (serverResponse) {
                    var jsonTest = JSON.parse(serverResponse);
                    console.log(jsonTest);
                    //grab area to append to
                    var chatsList = $("#allChats");
                    //Reset the chats area by using the empty method -- no duplicates
                    chatsList.empty();
                    $.each(jsonTest, function (inx, val) {
                        //create html elements to hold the values
                        var chatContainer = $("<div class='chat-container'>");
                        var user = $("<p class='username'>");
                        var park = $("<p class='park'>");
                        var message = $("<p>");
                        // assign text of user and message for each chat to an html element
                        user.text(val.UserName);
                        park.text(val.ParkName);
                        message.text(val.ReviewComments);
                        //append user and message into the chatContainer
                        chatContainer.append(park);
                        chatContainer.append(user);
                        chatContainer.append(message);

                        //append chatContainer to #chatsList
                        chatsList.append(chatContainer);
                    });
                })
            }

    </script>
}


<table class="table">
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.ReviewTitle)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ReviewComments)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ReviewTimeStamp)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Rating)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.TotalVotes)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Park.ParkName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.AspNetUser.Email)
        </th>
        <th></th>
    </tr>

    @foreach (var item in Model)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.ReviewTitle)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReviewComments)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReviewTimeStamp)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Rating)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.TotalVotes)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Park.ParkName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.AspNetUser.Email)
            </td>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.ReviewID }) |
                @Html.ActionLink("Details", "Details", new { id = item.ReviewID }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.ReviewID })
            </td>
        </tr>
    }

</table>

